// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  password  String

  Product   Product[]
  ImportLog ImportLog[]
  SaleLog   SaleLog[]
}

model BlackList_access_token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accessToken String   @unique
}

model BlackList_refresh_token {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String   @unique
}

model Product {
  id          String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  price       Float
  stock       Int

  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  ImportLog   ImportLog[]
  SaleLogItem SaleLogItem[]

  // Define a composite primary key using both id and userId
  @@id([id, userId])
  // We still want name to be unique per user
  @@unique([name, userId])
}

model ImportLog {
  id          Int      @id @default(autoincrement())
  name        String
  quantity    Int      @default(0)
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId, userId], references: [id, userId])
}

model SaleLog {
  id          Int           @id @default(autoincrement())
  total       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  SaleLogItem SaleLogItem[]
}

model SaleLogItem {
  saleLogId Int
  productId String
  userId    Int
  price     Float
  quantity  Int
  saleLog   SaleLog @relation(fields: [saleLogId], references: [id])
  product   Product @relation(fields: [productId, userId], references: [id, userId])

  // Define a composite primary key using saleLogId, productId
  @@id([saleLogId, productId])
}
